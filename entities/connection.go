package entities

import (
	"encoding/json"
	"errors"
	"time"

	"github.com/google/uuid"
)

type Connection struct {
	ID                           string `json:"id"`             // Autogenerated
	DeviceID                     string `json:"device_id"`      // (Mandatory) From the Device that initiated the connection
	DeviceName                   string `json:"device_name"`    // (Optional) From the Device
	DeviceType                   string `json:"device_type"`    // (Optional) From the Device
	UserAgent                    string `json:"user_agent"`     // (Optional) From the Device
	RemoteAddress                string `json:"remote_address"` // (Mandatory) from the physical connection
	CreatedAt                    int64  `json:"created_at"`     // Autogenerated
	LastReceivedMessageTimeStamp int64  `json:"last_received_message_ts"`
	LastSentMessageTimeStamp     int64  `json:"last_sent_message_ts"`
	ReceivedMessages             uint   `json:"received_messages"`
	SentMessages                 uint   `json:"sent_messages"`
}

// NewConnectionFromDefaultPayload Parse a payload and try to find device_id field
// and return a new connection instance.
func NewConnectionFromDefaultPayload(payload, remoteAddress string) (*Connection, error) {
	// See https://blog.golang.org/json
	var c Connection

	err := json.Unmarshal([]byte(payload), &c)

	if err != nil {
		return nil, err
	}

	return NewConnection(c.DeviceID, c.DeviceName, c.DeviceType, c.UserAgent, remoteAddress)
}

// NewConnection Creates a new instance of entities.Connection
func NewConnection(deviceID, deviceName, deviceType, userAgent, remoteAddress string) (*Connection, error) {

	if deviceID == "" {
		return nil, errors.New("can not create a new connection: empty deviceID")
	}

	if remoteAddress == "" {
		return nil, errors.New("can not create a new connection: empty remoteAddress")
	}

	return &Connection{
		ID:            uuid.New().String(),
		DeviceID:      deviceID,
		DeviceName:    deviceName,
		DeviceType:    deviceType,
		UserAgent:     userAgent,
		RemoteAddress: remoteAddress,
		CreatedAt:     time.Now().Unix(),
	}, nil
}

// Uptime how many seconds the connection has been active
func (c *Connection) Uptime() (int64, error) {
	if c.CreatedAt == 0 {
		return -1, errors.New("connection has not been established")
	}

	return time.Now().Unix() - c.CreatedAt, nil
}

// MessageSent A message has been sent to the connected IoT device
func (c *Connection) MessageSent() {
	c.SentMessages++
	c.LastSentMessageTimeStamp = time.Now().Unix()
}

// MessageReceived A message was received from the connected IoT device
func (c *Connection) MessageReceived() {
	c.ReceivedMessages++
	c.LastReceivedMessageTimeStamp = time.Now().Unix()
}
